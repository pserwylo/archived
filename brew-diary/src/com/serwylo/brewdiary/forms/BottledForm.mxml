<?xml version="1.0"?>
<s:TitleWindow
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:ivt="com.ivt.flex.controls.*"
	close="this.close()"
	title="Bottle Count"
	creationComplete="this.setup()">

	<fx:Script>
		<![CDATA[
		import com.serwylo.brewdiary.data.Bottle;
		import com.serwylo.brewdiary.data.BottleType;
		import com.serwylo.brewdiary.services.BottleService;

		import mx.collections.ArrayCollection;
		import mx.collections.ArrayCollection;
		import mx.core.FlexGlobals;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;

		import spark.components.NumericStepper;

		private var _bottleTypeList:ArrayCollection;
		private var _steppers:Array = new Array();
		private var _bottles:ArrayCollection;

		public function setup():void
		{
			this._bottleTypeList = new ArrayCollection( BottleService.getBottleTypeList() );

			var formItem:FormItem;

			for each ( var type:BottleType in this._bottleTypeList )
			{
				formItem = new FormItem();
				formItem.label = type.bottleTypeLabel + " (" + type.capacity + "ml)";
				formItem.direction = "horizontal";

				var stepper:NumericStepper = new NumericStepper();
				stepper.id = "bottle_" + type.bottleTypeSerial + "_total";
				stepper.minimum = 0;
				stepper.maximum = Number.MAX_VALUE;
				stepper.width = 70;
				stepper.addEventListener( Event.CHANGE, this.onStepperChanged );
				formItem.addChild( stepper );
				this._steppers.push( stepper );

				stepper = new NumericStepper();
				stepper.id = "bottle_" + type.bottleTypeSerial + "_used";
				stepper.minimum = 0;
				stepper.maximum = Number.MAX_VALUE;
				stepper.width = 70;
				stepper.addEventListener( Event.CHANGE, this.onStepperChanged );
				formItem.addChild( stepper );
				this._steppers.push( stepper );


				this.form.addChildAt( formItem, 0 );
			}

			formItem = new FormItem();
			formItem.direction = "horizontal";
			var label:Label = new Label();
			label.text = "Total";
			label.styleName = "formItemLabel";
			label.width = 70;
			formItem.addChild( label );
			label = new Label();
			label.text = "Drank";
			label.styleName = "formItemLabel";
			label.width = 70;
			formItem.addChild( label );
			this.form.addChildAt( formItem, 0 );

		}

		private function onStepperChanged( event:Event ):void
		{
			var total:Number = 0;
			var used:Number = 0;
			for each ( var stepper:NumericStepper in this._steppers )
			{
				for each ( var type:BottleType in this._bottleTypeList )
				{
					if ( stepper.id == "bottle_" + type.bottleTypeSerial + "_total" )
					{
						total += stepper.value * type.capacity;
						break;
					}
					else if ( stepper.id == "bottle_" + type.bottleTypeSerial + "_used" )
					{
						used += stepper.value * type.capacity;
						break;
					}
				}
			}
			this.btnOk.enabled = total > 0;
			this.outputTotal.text = Number( ( total - used ) / 1000 ).toFixed( 2 ) + " out of " + Number( total / 1000 ).toFixed( 2 ) + " litres";
		}

		public function close():void
		{
			PopUpManager.removePopUp( this );
		}

		public function get bottleValues():Array
		{
			var result:Array = new Array();
			for each ( var stepper:NumericStepper in this._steppers )
			{
				for each ( var type:BottleType in this._bottleTypeList )
				{
					if ( stepper.id == "bottle_" + type.bottleTypeSerial )
					{
						var bottle:Bottle = new Bottle();
						bottle.bottleType = type;
						bottle.count = stepper.value;
						result.push( bottle );
						break;
					}
				}
			}
			return result;
		}

		public static function showNormal( bottles:ArrayCollection, modal:Boolean = true ):BottledForm
		{
			var form:BottledForm = new BottledForm();
			form._bottles = bottles;
			PopUpManager.addPopUp( form, DisplayObject( FlexGlobals.topLevelApplication ), modal );
			PopUpManager.centerPopUp( form );
			return form;
		}

		public static function showAfterBottleFermentation( modal:Boolean = true ):BottledForm
		{
			var form:BottledForm = new BottledForm();
			form.currentState = "afterBottleFermentation";
			PopUpManager.addPopUp( form, DisplayObject( FlexGlobals.topLevelApplication ), modal );
			PopUpManager.centerPopUp( form );
			return form;
		}

		public static function showAfterBottling( modal:Boolean = true ):BottledForm
		{
			var form:BottledForm = new BottledForm();
			form.currentState = "afterBottling";
			PopUpManager.addPopUp( form, DisplayObject( FlexGlobals.topLevelApplication ), modal );
			PopUpManager.centerPopUp( form );
			return form;
		}

		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal" />
		<s:State name="afterBottling" />
		<s:State name="afterBottleFermentation" />
	</s:states>

	<s:layout>
		<s:VerticalLayout
			paddingTop="10"
			paddingBottom="10"
			paddingLeft="10"
			paddingRight="10"/>
	</s:layout>

	<s:Label includeIn="afterBottling">
		<s:text>Do you know how many bottles you filled?
If not, you can come back at a later time to fill in the details.</s:text>
	</s:Label>

	<s:Label includeIn="afterBottleFermentation">
		<s:text>You still haven't specified how many bottles you've filled.
If you don't specify it now, you can still come back at a later time to fill in the details.</s:text>
	</s:Label>

	<mx:Form id="form" width="100%" height="100%">
		<mx:FormItem
			label="Total"
			width="100%">
			<s:Label
				id="outputTotal" />
		</mx:FormItem>
	</mx:Form>

	<s:controlBarContent>
		<s:HGroup width="100%">
			<s:Button
				label="Cancel"
				width="100"
				click="this.dispatchEvent( new CloseEvent( CloseEvent.CLOSE ) );"/>
			<mx:Spacer width="100%"/>
			<s:Button
				id="btnOk"
				label="Ok"
				width="100"
				enabled="false"
				click="this.dispatchEvent( new Event( Event.SELECT ) ); this.close()"/>
		</s:HGroup>
	</s:controlBarContent>

</s:TitleWindow>
